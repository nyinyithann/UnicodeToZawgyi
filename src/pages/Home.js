// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../Util.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ActionBar from "../components/ActionBar.js";
import * as Converter from "rescript-unicode-zawgyi-converter/src/converter.js";
import * as ConfirmDialog from "../components/ConfirmDialog.js";
import * as SaveLastInputHook from "../hooks/SaveLastInputHook.js";

function string(prim) {
  return prim;
}

function useState(prim) {
  return React.useState(function () {
              return Curry._1(prim, undefined);
            });
}

function useRef(prim) {
  return React.useRef(prim);
}

function useEffect0(prim) {
  React.useEffect((function () {
          return Curry._1(prim, undefined);
        }), []);
  
}

function useEffect2(prim0, prim1) {
  React.useEffect((function () {
          return Curry._1(prim0, undefined);
        }), prim1);
  
}

var zawgyiText = "ငါဟာ ေရာက္ၿပီးသားေတြ ျပန္ျပန္ေရာက္ေနတယ္\nငါဟာ ျဖစ္ၿပီးသားေတြ ျပန္ျပန္ျဖစ္ေနတယ္\nငါဟာ တိုင္ပတ္ေနတယ္\nငါဟာ ရြာလည္ေနတယ္။\nဒါဟာ ကမၻာႀကီး လိေမၼာ္သီးကဲ့သို႔\nလံုး၀န္းေနေၾကာင္း၊ လံုးေၾကာင္း\nေသခ်ာေရရာေအာင္\nငါေျပာႏိုင္ခဲ့တာပဲ။ ။\n(ေအာင္ခ်ိမ့္)";

function Home(Props) {
  var zawgyiInputRef = React.useRef(null);
  var unicodeInputRef = React.useRef(null);
  var match = SaveLastInputHook.useSaveLstInput(zawgyiText);
  var saveText = match[1];
  var storedText = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setOpenDialog = match$1[1];
  var match$2 = React.useState(function () {
        return /* Zawgyi */0;
      });
  var setSelectedTextArea = match$2[1];
  var selectedTextArea = match$2[0];
  var match$3 = React.useState(function () {
        return /* Single */0;
      });
  var setToggleState = match$3[1];
  var toggleState = match$3[0];
  var x = "tab-btn border-b-2 border-primary_700";
  var y = "tab-btn";
  var match$4 = selectedTextArea ? [
      y,
      x
    ] : [
      x,
      y
    ];
  var match$5;
  if (toggleState) {
    match$5 = [
      "w-1/2 h-full p-[0.8rem] md:pl-[0.8rem] md:pr-[0.1rem] pt-[0.1rem]",
      "w-1/2 h-full p-[0.8rem] md:pl-[0.1rem] md:pr-[0.6rem] pt-[0.1rem]"
    ];
  } else {
    var x$1 = "w-full h-full p-[0.6rem] md:px-[0.6rem] pt-[0.1rem]";
    var y$1 = "invisible md:hidden w-0";
    match$5 = selectedTextArea ? [
        y$1,
        x$1
      ] : [
        x$1,
        y$1
      ];
  }
  React.useEffect((function () {
          var input = zawgyiInputRef.current;
          if (!(input == null)) {
            input.value = storedText;
          }
          var input$1 = unicodeInputRef.current;
          if (!(input$1 == null)) {
            input$1.value = Converter.zg2uni(storedText);
          }
          var id = setInterval((function (param) {
                  var input = zawgyiInputRef.current;
                  if (!(input == null)) {
                    return Curry._1(saveText, input.value);
                  }
                  
                }), 5000);
          return (function (param) {
                    clearInterval(id);
                    
                  });
        }), []);
  useEffect2((function (param) {
          if (selectedTextArea) {
            var input = unicodeInputRef.current;
            if (!(input == null)) {
              input.focus();
            }
            
          } else {
            var input$1 = zawgyiInputRef.current;
            if (!(input$1 == null)) {
              input$1.focus();
            }
            
          }
          
        }), [
        selectedTextArea,
        toggleState
      ]);
  var handleZawgyiBtnClick = function (e) {
    e.preventDefault();
    return Curry._1(setSelectedTextArea, (function (param) {
                  return /* Zawgyi */0;
                }));
  };
  var handleUnicodeBtnClick = function (e) {
    e.preventDefault();
    return Curry._1(setSelectedTextArea, (function (param) {
                  return /* Unicode */1;
                }));
  };
  var handleZawgyiTextChange = function (e) {
    var value = e.target.value;
    var input = unicodeInputRef.current;
    if (!(input == null)) {
      input.value = Converter.zg2uni(value);
      return ;
    }
    
  };
  var handleZawgyiTextFocus = function (e) {
    e.preventDefault();
    return Curry._1(setSelectedTextArea, (function (param) {
                  return /* Zawgyi */0;
                }));
  };
  var handleUnicodeTextChange = function (e) {
    var value = e.target.value;
    var input = zawgyiInputRef.current;
    if (!(input == null)) {
      input.value = Converter.uni2zg(value);
      return ;
    }
    
  };
  var handleUnicodeTextFocus = function (e) {
    e.preventDefault();
    return Curry._1(setSelectedTextArea, (function (param) {
                  return /* Unicode */1;
                }));
  };
  var onDelete = function (param) {
    return Curry._1(setOpenDialog, (function (param) {
                  return true;
                }));
  };
  var $$delete = function (param) {
    var input = zawgyiInputRef.current;
    if (!(input == null)) {
      input.value = "";
    }
    var input$1 = unicodeInputRef.current;
    if (!(input$1 == null)) {
      input$1.value = "";
      return ;
    }
    
  };
  var onCopy = function (copyContent) {
    var getZawgyiText = function (param) {
      var input = zawgyiInputRef.current;
      if (input == null) {
        return "";
      } else {
        return input.value;
      }
    };
    var getUnicodeText = function (param) {
      var input = unicodeInputRef.current;
      if (input == null) {
        return "";
      } else {
        return input.value;
      }
    };
    switch (copyContent) {
      case /* ZawgyiText */0 :
          return Util.copy(getZawgyiText(undefined));
      case /* UnicodeText */1 :
          return Util.copy(getUnicodeText(undefined));
      case /* BothText */2 :
          return Util.copy(getZawgyiText(undefined) + "\n\r" + getUnicodeText(undefined));
      
    }
  };
  var onToggle = function (param) {
    return Curry._1(setToggleState, (function (prev) {
                  if (prev === /* Single */0) {
                    return /* Double */1;
                  } else {
                    return /* Single */0;
                  }
                }));
  };
  return React.createElement("div", {
              className: "flex flex-col flex-nowrap h-[calc(100vh-6.2rem)] md:h-[calc(100vh-3rem)] w-full"
            }, React.createElement("div", {
                  className: "flex flex-nowrap w-full h-10 items-end bg-white"
                }, React.createElement("div", {
                      className: "flex px-3 pb-1 space-x-2 items-end font-secondary"
                    }, React.createElement("button", {
                          className: match$4[0],
                          type: "button",
                          onClick: handleZawgyiBtnClick
                        }, "Zawgyi"), React.createElement("button", {
                          className: match$4[1],
                          type: "button",
                          onClick: handleUnicodeBtnClick
                        }, "Unicode")), React.createElement(ActionBar.make, {
                      className: "flex p-1 pr-3 space-x-2 justify-end ml-auto w-36",
                      toggleState: toggleState,
                      onDelete: onDelete,
                      onCopy: onCopy,
                      onToggle: onToggle
                    })), React.createElement("div", {
                  className: "flex h-[calc(100vh-5.5rem)] space-x-1"
                }, React.createElement("div", {
                      className: match$5[0]
                    }, React.createElement("textarea", {
                          ref: zawgyiInputRef,
                          className: "text-area w-full font-myanmar_zawgyi",
                          spellCheck: false,
                          onFocus: handleZawgyiTextFocus,
                          onChange: handleZawgyiTextChange
                        })), React.createElement("div", {
                      className: match$5[1]
                    }, React.createElement("textarea", {
                          ref: unicodeInputRef,
                          className: "text-area w-full font-myanmar_unicode",
                          spellCheck: false,
                          onFocus: handleUnicodeTextFocus,
                          onChange: handleUnicodeTextChange
                        }))), React.createElement(ConfirmDialog.make, {
                  isOpen: match$1[0],
                  onClose: (function (param) {
                      return Curry._1(setOpenDialog, (function (param) {
                                    return false;
                                  }));
                    }),
                  delete: $$delete
                }));
}

var make = Home;

export {
  string ,
  useState ,
  useRef ,
  useEffect0 ,
  useEffect2 ,
  zawgyiText ,
  make ,
  
}
/* react Not a pure module */
